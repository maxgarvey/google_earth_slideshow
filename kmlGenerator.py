# kmlGenerator.py
import os
import shutil
import math
import weoXML
import BeautifulSoup
from subprocess import call # we're going to have to curl the kml files
                            #this part will download all of the relevant files
'''The following are some global params that may be useful to change at some point'''                            
duration = 8                #how long will it stay on zoomed in on a location (in seconds)
zoomx = 210000              #these are the zoom levels for the x dimension (when the length is greater than the height)
zoomy = 210000              #and the y dimension (vice versa)

fileOpened = False
while not fileOpened:           #we try to open the file, and while its not opened, we will continue trying
    try:                        #tokenRequestUrls.txt is generated by the linkGenerator.py script
        file = open('tokenRequestUrls.txt', 'r')
        directoryMade = False
        while not directoryMade:        #while we haven't made the appropriate directory, we try again
            try:                        #mk dir makes the directory
                os.mkdir('tourKmls')
                directoryMade = True    #boo allows exit from outer while loop
            except:
                shutil.rmtree('tourKmls')   #shutil deletes the existing directory, if it's already there
            fileOpened = True               #if we can open it, then we set the boo to exit the inner while loop
    except:
        print "please run the support script linkGenerator prior to starting the tour"  #if there's no tokenRequestUrls.txt file, we
        break                                                                           #instruct the user to run the other python script first

tokenRequestUrlsString = file.read()     #this line reads the file contents into memory as one great big string
file.close()                             #close the file; we're done with it

tokenRequestList = tokenRequestUrlsString.split( '\n' ) # splits the file line by line into a list
tokenIndex = 0                          #for each token request, we curl the request and write to file in the tourKmls directory
for tokenRequest in tokenRequestList:   #with a name of the scheme: "thisKml0" where 0 would be the index of that kml
    call( 'curl ' + tokenRequest + ' > tourKmls/thisKml' + str( tokenIndex ) + '.kml', shell=True )
    tokenIndex += 1                     #when this for loop is exited, we will have all of the kml files for the tour in tourKmls folder

#the rest of this script will write the kml tour file
KmlTour = open( 'KmlTour.kml', 'w' )    #here, we open the file that will hold the tour
#these lines are some header info
kmlStartString = '<?xml version="1.0" encoding="UTF-8"?>\n<kml xmlns="http://www.opengis.net/kml/2.2"\nxmlns:gx="http://www.google.com/kml/ext/2.2">\n'     #here's the root node
#kmlStartString is the top of the kml file, it has the header info and styling for the placemarks in the tour.
kmlStartString += '<Document>\n<StyleMap id="weogeo_logo_map">\n<Pair>\n<key>normal</key>\n<styleUrl>#weogeo_logo</styleUrl>\n</Pair>\n<Pair>\n<key>highlight</key>\n<styleUrl>#weogeo_logo_h</styleUrl>\n</Pair>\n</StyleMap>\n<Style id="weogeo_logo">\n<IconStyle>\n<scale>1.1</scale>\n<Icon>\n<href>http://market.weogeo.com/ge/global/weo_button_small.png</href>\n</Icon>\n<hotSpot x="20" y="2" xunits="pixels" yunits="pixels"/>\n</IconStyle>\n</Style>\n<Style id="weogeo_logo_h">\n<IconStyle>\n<scale>1.3</scale>\n<Icon>\n<href>http://market.weogeo.com/ge/global/weo_button_small.png</href>\n</Icon>\n<hotSpot x="20" y="2" xunits="pixels" yunits="pixels"/>\n</IconStyle>\n</Style>\n<name>WeoGeo Kml Tour</name>\n<open>1</open>\n'
#kmlTourString is the string that holds the tour information ie: the playlist, etc.
kmlTourString = '<gx:Tour>\n<name>WeoGeo Tour</name>\n<gx:Playlist>\n'
kmlOverlayString = ''
kmlPlacemarkString = ''
#here's where we're going to have to add an entry for each map.
for fileName in os.listdir('tourKmls'):
    kmlFile = open( os.path.join('tourKmls', fileName), 'r' ) #we open a file from tourKmls folder
    individualKmlString = kmlFile.read()                      #read contents to string
    kmlFile.close()                                           #close the file
    #print "doing " + fileName # debug
    try:                                                      #this block extracts the coordinates, the overlay tags, the names
        weoSoup = BeautifulSoup.BeautifulSoup( individualKmlString )
        documentContents = weoSoup.kml.document.contents
        for tag in documentContents:
            try:
                if tag.name == 'name':
                    nameString = tag.string
                    break
            except:
                pass
        overlayString = str( weoSoup.find('groundoverlay') )
        overlaySoup = BeautifulSoup.BeautifulSoup( overlayString )
        overlayContents = overlaySoup.contents
        for tag in overlayContents:
            if tag.name == 'name':
                tag.replaceWith('<name>' + nameString + '</name>')
        overlaySoup.groundoverlay['id'] = fileName
        visibilityTag = BeautifulSoup.NavigableString('<visibility>0</visibility>')
        overlaySoup.groundoverlay.insert( 0, visibilityTag )
        kmlOverlayString += str( overlaySoup ).replace('groundoverlay','GroundOverlay').replace( 'latlonbox', 'LatLonBox' ).replace('icon','Icon')
        Folders = weoSoup.kml.document.findAll('folder')
        for folder in Folders:
            try:
                Coords = folder.placemark.point.coordinates.contents[0].split(',')
            except:
                pass
            try:
                linRingCoords = folder.placemark.polygon.outerboundaryis.linearring.coordinates.contents[0].split(' ')[0]
            except:
                pass
        longitude = Coords[0]
        latitude = Coords[1]
        CornerCoordList = linRingCoords.split(',')
        labelPositionX = float(CornerCoordList[0]) + .25*(float(longitude) - float(CornerCoordList[0]))
        labelPositionY = float(CornerCoordList[1]) + .2*(float(latitude) - float(CornerCoordList[1]))
        if (math.fabs(float(longitude) - float(CornerCoordList[0])) > math.fabs(float(latitude) - float(CornerCoordList[1]))):
            altitude = zoomx*(math.fabs(float(longitude) - float(CornerCoordList[0])))
        else:
            altitude = zoomy*(math.fabs(float(latitude) - float(CornerCoordList[1])))
        heading = 0
        tilt = 0
        #this line creates each placemark, initially set to be invisible
        kmlPlacemarkString += '<Placemark id="' + fileName.replace('thisKml','placemark').replace('.kml','') + '" >\n<name>' + nameString + '</name>\n<visibility>0</visibility>\n<styleUrl>#weogeo_logo_map</styleUrl>\n<Point>\n<coordinates>' + str(labelPositionX) + ', ' + str(labelPositionY) + ', 0 </coordinates>\n</Point>\n</Placemark>\n'''
        kmlTourString += '<gx:AnimatedUpdate>\n<gx:duration>0</gx:duration>\n<Update>\n<targetHref></targetHref>\n<Change>\n'
        #this line sets the next placemark to be visible
        kmlTourString += '<Placemark targetId="' + fileName.replace('thisKml','placemark').replace('.kml','') + '">\n<visibility>1</visibility>\n</Placemark>\n'
        kmlTourString += '</Change>\n<Change>\n'
        #this line sets the next ground overlay to be visible
        kmlTourString += '<GroundOverlay targetId="' + fileName + '">\n<visibility>1</visibility>\n</GroundOverlay>\n'
        kmlTourString += '</Change>\n</Update>\n</gx:AnimatedUpdate>\n<gx:FlyTo>\n<gx:duration>3.0</gx:duration>\n<Camera>\n'
        #these lines add the params from the individual kml into the tour entry
        kmlTourString += '<longitude>' + str( longitude ) + '</longitude>\n'
        kmlTourString += '<latitude>' + str( latitude ) + '</latitude>\n'
        kmlTourString += '<altitude>' + str( altitude ) +'</altitude>\n'
        kmlTourString += '<heading>' + str( heading ) + '</heading>\n'
        kmlTourString += '<tilt>' + str( tilt ) + '</tilt>\n'
        kmlTourString += '</Camera>\n</gx:FlyTo>\n'
        #this line adds the duration that the tour
        kmlTourString += '<gx:Wait>\n<gx:duration>' + str( duration ) + '</gx:duration>\n</gx:Wait>\n'
        kmlTourString += '<gx:AnimatedUpdate>\n<gx:duration>0</gx:duration>\n<Update>\n<targetHref></targetHref>\n<Change>\n'
        #this line toggles the visibility for the last ground overlay to 'off'
        kmlTourString += '<GroundOverlay targetId="' + fileName + '">\n<visibility>0</visibility>\n</GroundOverlay>\n'
        kmlTourString += '</Change>\n<Change>\n'
        #this line toggles the visibility for the last placemark to 'off'
        kmlTourString += '<Placemark targetId="' + fileName.replace('thisKml','placemark').replace('.kml','') + '">\n<visibility>0</visibility>\n</Placemark>\n'
        kmlTourString += '</Change>\n</Update>\n</gx:AnimatedUpdate>\n'
    except:
        pass
#this line adds some footer tags to the kml file
kmlTourString += '</gx:Playlist>\n</gx:Tour>\n</Document>\n</kml>\n'
#this line combines them all together
KmlTour.write( kmlStartString + kmlPlacemarkString + kmlOverlayString + kmlTourString )
KmlTour.close()
try:                                #here, we try to make a readable version of the kml file, mostly for debug purposes
    call( 'xmllint KmlTour.kml > readableTour.kml', shell=True )
except:
    pass 